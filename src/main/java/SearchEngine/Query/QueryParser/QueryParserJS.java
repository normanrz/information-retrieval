package SearchEngine.Query.QueryParser;

import SearchEngine.InvertedIndex.DocumentPostings;
import SearchEngine.utils.IntArrayUtils;
import jdk.nashorn.api.scripting.ScriptObjectMirror;

import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.util.Arrays;
import java.util.Collection;
import java.util.stream.Stream;

/**
 * Created by norman on 07.12.15.
 */
public class QueryParserJS {

    static String jsCode = "module = (function() {\n" +
            "  \"use strict\";\n" +
            "\n" +
            "  /*\n" +
            "   * Generated by PEG.js 0.9.0.\n" +
            "   *\n" +
            "   * http://pegjs.org/\n" +
            "   */\n" +
            "\n" +
            "  function peg$subclass(child, parent) {\n" +
            "    function ctor() { this.constructor = child; }\n" +
            "    ctor.prototype = parent.prototype;\n" +
            "    child.prototype = new ctor();\n" +
            "  }\n" +
            "\n" +
            "  function peg$SyntaxError(message, expected, found, location) {\n" +
            "    this.message  = message;\n" +
            "    this.expected = expected;\n" +
            "    this.found    = found;\n" +
            "    this.location = location;\n" +
            "    this.name     = \"SyntaxError\";\n" +
            "\n" +
            "    if (typeof Error.captureStackTrace === \"function\") {\n" +
            "      Error.captureStackTrace(this, peg$SyntaxError);\n" +
            "    }\n" +
            "  }\n" +
            "\n" +
            "  peg$subclass(peg$SyntaxError, Error);\n" +
            "\n" +
            "  function peg$parse(input) {\n" +
            "    var options = arguments.length > 1 ? arguments[1] : {},\n" +
            "        parser  = this,\n" +
            "\n" +
            "        peg$FAILED = {},\n" +
            "\n" +
            "        peg$startRuleFunctions = { Query: peg$parseQuery },\n" +
            "        peg$startRuleFunction  = peg$parseQuery,\n" +
            "\n" +
            "        peg$c0 = function(query, not, prf) { return { \n" +
            "              query: query, \n" +
            "              not: not.map(function (t) { return t[1] }), \n" +
            "              prf: prf ? prf[1] : 0\n" +
            "            }; },\n" +
            "        peg$c1 = function(boolean) { return boolean; },\n" +
            "        peg$c2 = \"AND\",\n" +
            "        peg$c3 = { type: \"literal\", value: \"AND\", description: \"\\\"AND\\\"\" },\n" +
            "        peg$c4 = \"OR\",\n" +
            "        peg$c5 = { type: \"literal\", value: \"OR\", description: \"\\\"OR\\\"\" },\n" +
            "        peg$c6 = \"NOT\",\n" +
            "        peg$c7 = { type: \"literal\", value: \"NOT\", description: \"\\\"NOT\\\"\" },\n" +
            "        peg$c8 = /^[a-zA-Z0-9\\-]/,\n" +
            "        peg$c9 = { type: \"class\", value: \"[a-zA-Z0-9\\\\-]\", description: \"[a-zA-Z0-9\\\\-]\" },\n" +
            "        peg$c10 = function() { return text().replace(/\\-/g, \"\"); },\n" +
            "        peg$c11 = /^[0-9]/,\n" +
            "        peg$c12 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n" +
            "        peg$c13 = function() { return parseInt(text()); },\n" +
            "        peg$c14 = \"*\",\n" +
            "        peg$c15 = { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n" +
            "        peg$c16 = function(word, asterisk) { return { type: 'token', value: word, isPrefix: !!asterisk }; },\n" +
            "        peg$c17 = \"linkTo:\",\n" +
            "        peg$c18 = { type: \"literal\", value: \"linkTo:\", description: \"\\\"linkTo:\\\"\" },\n" +
            "        peg$c19 = function(number) { return {\n" +
            "              type: 'link',\n" +
            "              value: number\n" +
            "            }; },\n" +
            "        peg$c20 = \"\\\"\",\n" +
            "        peg$c21 = { type: \"literal\", value: \"\\\"\", description: \"\\\"\\\\\\\"\\\"\" },\n" +
            "        peg$c22 = function(head, tail) { return { \n" +
            "              type: 'phrase', \n" +
            "              values: [head].concat(tail.map(function (t) { return t[1]; })) \n" +
            "            }; },\n" +
            "        peg$c23 = function(value) { return value },\n" +
            "        peg$c24 = \"#\",\n" +
            "        peg$c25 = { type: \"literal\", value: \"#\", description: \"\\\"#\\\"\" },\n" +
            "        peg$c26 = function(number) { return number; },\n" +
            "        peg$c27 = function(left, right) { return flatten({ type: 'and', values: [left, right] }); },\n" +
            "        peg$c28 = function(left, right) { return flatten({ type: 'or', values: [left, right] }); },\n" +
            "        peg$c29 = \"(\",\n" +
            "        peg$c30 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n" +
            "        peg$c31 = \")\",\n" +
            "        peg$c32 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n" +
            "        peg$c33 = function(value) { return value; },\n" +
            "        peg$c34 = { type: \"other\", description: \"optionalWhitespace\" },\n" +
            "        peg$c35 = /^[ \\t\\n\\r]/,\n" +
            "        peg$c36 = { type: \"class\", value: \"[ \\\\t\\\\n\\\\r]\", description: \"[ \\\\t\\\\n\\\\r]\" },\n" +
            "        peg$c37 = { type: \"other\", description: \"whitespace\" },\n" +
            "\n" +
            "        peg$currPos          = 0,\n" +
            "        peg$savedPos         = 0,\n" +
            "        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],\n" +
            "        peg$maxFailPos       = 0,\n" +
            "        peg$maxFailExpected  = [],\n" +
            "        peg$silentFails      = 0,\n" +
            "\n" +
            "        peg$result;\n" +
            "\n" +
            "    if (\"startRule\" in options) {\n" +
            "      if (!(options.startRule in peg$startRuleFunctions)) {\n" +
            "        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n" +
            "      }\n" +
            "\n" +
            "      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n" +
            "    }\n" +
            "\n" +
            "    function text() {\n" +
            "      return input.substring(peg$savedPos, peg$currPos);\n" +
            "    }\n" +
            "\n" +
            "    function location() {\n" +
            "      return peg$computeLocation(peg$savedPos, peg$currPos);\n" +
            "    }\n" +
            "\n" +
            "    function expected(description) {\n" +
            "      throw peg$buildException(\n" +
            "        null,\n" +
            "        [{ type: \"other\", description: description }],\n" +
            "        input.substring(peg$savedPos, peg$currPos),\n" +
            "        peg$computeLocation(peg$savedPos, peg$currPos)\n" +
            "      );\n" +
            "    }\n" +
            "\n" +
            "    function error(message) {\n" +
            "      throw peg$buildException(\n" +
            "        message,\n" +
            "        null,\n" +
            "        input.substring(peg$savedPos, peg$currPos),\n" +
            "        peg$computeLocation(peg$savedPos, peg$currPos)\n" +
            "      );\n" +
            "    }\n" +
            "\n" +
            "    function peg$computePosDetails(pos) {\n" +
            "      var details = peg$posDetailsCache[pos],\n" +
            "          p, ch;\n" +
            "\n" +
            "      if (details) {\n" +
            "        return details;\n" +
            "      } else {\n" +
            "        p = pos - 1;\n" +
            "        while (!peg$posDetailsCache[p]) {\n" +
            "          p--;\n" +
            "        }\n" +
            "\n" +
            "        details = peg$posDetailsCache[p];\n" +
            "        details = {\n" +
            "          line:   details.line,\n" +
            "          column: details.column,\n" +
            "          seenCR: details.seenCR\n" +
            "        };\n" +
            "\n" +
            "        while (p < pos) {\n" +
            "          ch = input.charAt(p);\n" +
            "          if (ch === \"\\n\") {\n" +
            "            if (!details.seenCR) { details.line++; }\n" +
            "            details.column = 1;\n" +
            "            details.seenCR = false;\n" +
            "          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n" +
            "            details.line++;\n" +
            "            details.column = 1;\n" +
            "            details.seenCR = true;\n" +
            "          } else {\n" +
            "            details.column++;\n" +
            "            details.seenCR = false;\n" +
            "          }\n" +
            "\n" +
            "          p++;\n" +
            "        }\n" +
            "\n" +
            "        peg$posDetailsCache[pos] = details;\n" +
            "        return details;\n" +
            "      }\n" +
            "    }\n" +
            "\n" +
            "    function peg$computeLocation(startPos, endPos) {\n" +
            "      var startPosDetails = peg$computePosDetails(startPos),\n" +
            "          endPosDetails   = peg$computePosDetails(endPos);\n" +
            "\n" +
            "      return {\n" +
            "        start: {\n" +
            "          offset: startPos,\n" +
            "          line:   startPosDetails.line,\n" +
            "          column: startPosDetails.column\n" +
            "        },\n" +
            "        end: {\n" +
            "          offset: endPos,\n" +
            "          line:   endPosDetails.line,\n" +
            "          column: endPosDetails.column\n" +
            "        }\n" +
            "      };\n" +
            "    }\n" +
            "\n" +
            "    function peg$fail(expected) {\n" +
            "      if (peg$currPos < peg$maxFailPos) { return; }\n" +
            "\n" +
            "      if (peg$currPos > peg$maxFailPos) {\n" +
            "        peg$maxFailPos = peg$currPos;\n" +
            "        peg$maxFailExpected = [];\n" +
            "      }\n" +
            "\n" +
            "      peg$maxFailExpected.push(expected);\n" +
            "    }\n" +
            "\n" +
            "    function peg$buildException(message, expected, found, location) {\n" +
            "      function cleanupExpected(expected) {\n" +
            "        var i = 1;\n" +
            "\n" +
            "        expected.sort(function(a, b) {\n" +
            "          if (a.description < b.description) {\n" +
            "            return -1;\n" +
            "          } else if (a.description > b.description) {\n" +
            "            return 1;\n" +
            "          } else {\n" +
            "            return 0;\n" +
            "          }\n" +
            "        });\n" +
            "\n" +
            "        while (i < expected.length) {\n" +
            "          if (expected[i - 1] === expected[i]) {\n" +
            "            expected.splice(i, 1);\n" +
            "          } else {\n" +
            "            i++;\n" +
            "          }\n" +
            "        }\n" +
            "      }\n" +
            "\n" +
            "      function buildMessage(expected, found) {\n" +
            "        function stringEscape(s) {\n" +
            "          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n" +
            "\n" +
            "          return s\n" +
            "            .replace(/\\\\/g,   '\\\\\\\\')\n" +
            "            .replace(/\"/g,    '\\\\\"')\n" +
            "            .replace(/\\x08/g, '\\\\b')\n" +
            "            .replace(/\\t/g,   '\\\\t')\n" +
            "            .replace(/\\n/g,   '\\\\n')\n" +
            "            .replace(/\\f/g,   '\\\\f')\n" +
            "            .replace(/\\r/g,   '\\\\r')\n" +
            "            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n" +
            "            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n" +
            "            .replace(/[\\u0100-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n" +
            "            .replace(/[\\u1000-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n" +
            "        }\n" +
            "\n" +
            "        var expectedDescs = new Array(expected.length),\n" +
            "            expectedDesc, foundDesc, i;\n" +
            "\n" +
            "        for (i = 0; i < expected.length; i++) {\n" +
            "          expectedDescs[i] = expected[i].description;\n" +
            "        }\n" +
            "\n" +
            "        expectedDesc = expected.length > 1\n" +
            "          ? expectedDescs.slice(0, -1).join(\", \")\n" +
            "              + \" or \"\n" +
            "              + expectedDescs[expected.length - 1]\n" +
            "          : expectedDescs[0];\n" +
            "\n" +
            "        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n" +
            "\n" +
            "        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n" +
            "      }\n" +
            "\n" +
            "      if (expected !== null) {\n" +
            "        cleanupExpected(expected);\n" +
            "      }\n" +
            "\n" +
            "      return new peg$SyntaxError(\n" +
            "        message !== null ? message : buildMessage(expected, found),\n" +
            "        expected,\n" +
            "        found,\n" +
            "        location\n" +
            "      );\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseQuery() {\n" +
            "      var s0, s1, s2, s3, s4, s5, s6;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      s1 = peg$parse_();\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        s2 = peg$parseSubquery();\n" +
            "        if (s2 !== peg$FAILED) {\n" +
            "          s3 = [];\n" +
            "          s4 = peg$currPos;\n" +
            "          s5 = peg$parse_();\n" +
            "          if (s5 !== peg$FAILED) {\n" +
            "            s6 = peg$parseNotToken();\n" +
            "            if (s6 !== peg$FAILED) {\n" +
            "              s5 = [s5, s6];\n" +
            "              s4 = s5;\n" +
            "            } else {\n" +
            "              peg$currPos = s4;\n" +
            "              s4 = peg$FAILED;\n" +
            "            }\n" +
            "          } else {\n" +
            "            peg$currPos = s4;\n" +
            "            s4 = peg$FAILED;\n" +
            "          }\n" +
            "          while (s4 !== peg$FAILED) {\n" +
            "            s3.push(s4);\n" +
            "            s4 = peg$currPos;\n" +
            "            s5 = peg$parse_();\n" +
            "            if (s5 !== peg$FAILED) {\n" +
            "              s6 = peg$parseNotToken();\n" +
            "              if (s6 !== peg$FAILED) {\n" +
            "                s5 = [s5, s6];\n" +
            "                s4 = s5;\n" +
            "              } else {\n" +
            "                peg$currPos = s4;\n" +
            "                s4 = peg$FAILED;\n" +
            "              }\n" +
            "            } else {\n" +
            "              peg$currPos = s4;\n" +
            "              s4 = peg$FAILED;\n" +
            "            }\n" +
            "          }\n" +
            "          if (s3 !== peg$FAILED) {\n" +
            "            s4 = peg$currPos;\n" +
            "            s5 = peg$parse_();\n" +
            "            if (s5 !== peg$FAILED) {\n" +
            "              s6 = peg$parsePrf();\n" +
            "              if (s6 !== peg$FAILED) {\n" +
            "                s5 = [s5, s6];\n" +
            "                s4 = s5;\n" +
            "              } else {\n" +
            "                peg$currPos = s4;\n" +
            "                s4 = peg$FAILED;\n" +
            "              }\n" +
            "            } else {\n" +
            "              peg$currPos = s4;\n" +
            "              s4 = peg$FAILED;\n" +
            "            }\n" +
            "            if (s4 === peg$FAILED) {\n" +
            "              s4 = null;\n" +
            "            }\n" +
            "            if (s4 !== peg$FAILED) {\n" +
            "              s5 = peg$parse_();\n" +
            "              if (s5 !== peg$FAILED) {\n" +
            "                peg$savedPos = s0;\n" +
            "                s1 = peg$c0(s2, s3, s4);\n" +
            "                s0 = s1;\n" +
            "              } else {\n" +
            "                peg$currPos = s0;\n" +
            "                s0 = peg$FAILED;\n" +
            "              }\n" +
            "            } else {\n" +
            "              peg$currPos = s0;\n" +
            "              s0 = peg$FAILED;\n" +
            "            }\n" +
            "          } else {\n" +
            "            peg$currPos = s0;\n" +
            "            s0 = peg$FAILED;\n" +
            "          }\n" +
            "        } else {\n" +
            "          peg$currPos = s0;\n" +
            "          s0 = peg$FAILED;\n" +
            "        }\n" +
            "      } else {\n" +
            "        peg$currPos = s0;\n" +
            "        s0 = peg$FAILED;\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseSubquery() {\n" +
            "      var s0, s1;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      s1 = peg$parseBooleanOr();\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        peg$savedPos = s0;\n" +
            "        s1 = peg$c1(s1);\n" +
            "      }\n" +
            "      s0 = s1;\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseKeyword() {\n" +
            "      var s0;\n" +
            "\n" +
            "      if (input.substr(peg$currPos, 3) === peg$c2) {\n" +
            "        s0 = peg$c2;\n" +
            "        peg$currPos += 3;\n" +
            "      } else {\n" +
            "        s0 = peg$FAILED;\n" +
            "        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n" +
            "      }\n" +
            "      if (s0 === peg$FAILED) {\n" +
            "        if (input.substr(peg$currPos, 2) === peg$c4) {\n" +
            "          s0 = peg$c4;\n" +
            "          peg$currPos += 2;\n" +
            "        } else {\n" +
            "          s0 = peg$FAILED;\n" +
            "          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n" +
            "        }\n" +
            "        if (s0 === peg$FAILED) {\n" +
            "          if (input.substr(peg$currPos, 3) === peg$c6) {\n" +
            "            s0 = peg$c6;\n" +
            "            peg$currPos += 3;\n" +
            "          } else {\n" +
            "            s0 = peg$FAILED;\n" +
            "            if (peg$silentFails === 0) { peg$fail(peg$c7); }\n" +
            "          }\n" +
            "        }\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseWord() {\n" +
            "      var s0, s1, s2, s3;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      s1 = peg$currPos;\n" +
            "      peg$silentFails++;\n" +
            "      s2 = peg$parseKeyword();\n" +
            "      peg$silentFails--;\n" +
            "      if (s2 === peg$FAILED) {\n" +
            "        s1 = void 0;\n" +
            "      } else {\n" +
            "        peg$currPos = s1;\n" +
            "        s1 = peg$FAILED;\n" +
            "      }\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        s2 = [];\n" +
            "        if (peg$c8.test(input.charAt(peg$currPos))) {\n" +
            "          s3 = input.charAt(peg$currPos);\n" +
            "          peg$currPos++;\n" +
            "        } else {\n" +
            "          s3 = peg$FAILED;\n" +
            "          if (peg$silentFails === 0) { peg$fail(peg$c9); }\n" +
            "        }\n" +
            "        if (s3 !== peg$FAILED) {\n" +
            "          while (s3 !== peg$FAILED) {\n" +
            "            s2.push(s3);\n" +
            "            if (peg$c8.test(input.charAt(peg$currPos))) {\n" +
            "              s3 = input.charAt(peg$currPos);\n" +
            "              peg$currPos++;\n" +
            "            } else {\n" +
            "              s3 = peg$FAILED;\n" +
            "              if (peg$silentFails === 0) { peg$fail(peg$c9); }\n" +
            "            }\n" +
            "          }\n" +
            "        } else {\n" +
            "          s2 = peg$FAILED;\n" +
            "        }\n" +
            "        if (s2 !== peg$FAILED) {\n" +
            "          peg$savedPos = s0;\n" +
            "          s1 = peg$c10();\n" +
            "          s0 = s1;\n" +
            "        } else {\n" +
            "          peg$currPos = s0;\n" +
            "          s0 = peg$FAILED;\n" +
            "        }\n" +
            "      } else {\n" +
            "        peg$currPos = s0;\n" +
            "        s0 = peg$FAILED;\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseNumber() {\n" +
            "      var s0, s1, s2;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      s1 = [];\n" +
            "      if (peg$c11.test(input.charAt(peg$currPos))) {\n" +
            "        s2 = input.charAt(peg$currPos);\n" +
            "        peg$currPos++;\n" +
            "      } else {\n" +
            "        s2 = peg$FAILED;\n" +
            "        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n" +
            "      }\n" +
            "      if (s2 !== peg$FAILED) {\n" +
            "        while (s2 !== peg$FAILED) {\n" +
            "          s1.push(s2);\n" +
            "          if (peg$c11.test(input.charAt(peg$currPos))) {\n" +
            "            s2 = input.charAt(peg$currPos);\n" +
            "            peg$currPos++;\n" +
            "          } else {\n" +
            "            s2 = peg$FAILED;\n" +
            "            if (peg$silentFails === 0) { peg$fail(peg$c12); }\n" +
            "          }\n" +
            "        }\n" +
            "      } else {\n" +
            "        s1 = peg$FAILED;\n" +
            "      }\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        peg$savedPos = s0;\n" +
            "        s1 = peg$c13();\n" +
            "      }\n" +
            "      s0 = s1;\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseToken() {\n" +
            "      var s0, s1, s2;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      s1 = peg$parseWord();\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        if (input.charCodeAt(peg$currPos) === 42) {\n" +
            "          s2 = peg$c14;\n" +
            "          peg$currPos++;\n" +
            "        } else {\n" +
            "          s2 = peg$FAILED;\n" +
            "          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n" +
            "        }\n" +
            "        if (s2 === peg$FAILED) {\n" +
            "          s2 = null;\n" +
            "        }\n" +
            "        if (s2 !== peg$FAILED) {\n" +
            "          peg$savedPos = s0;\n" +
            "          s1 = peg$c16(s1, s2);\n" +
            "          s0 = s1;\n" +
            "        } else {\n" +
            "          peg$currPos = s0;\n" +
            "          s0 = peg$FAILED;\n" +
            "        }\n" +
            "      } else {\n" +
            "        peg$currPos = s0;\n" +
            "        s0 = peg$FAILED;\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseLinkTo() {\n" +
            "      var s0, s1, s2;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      if (input.substr(peg$currPos, 7) === peg$c17) {\n" +
            "        s1 = peg$c17;\n" +
            "        peg$currPos += 7;\n" +
            "      } else {\n" +
            "        s1 = peg$FAILED;\n" +
            "        if (peg$silentFails === 0) { peg$fail(peg$c18); }\n" +
            "      }\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        s2 = peg$parseNumber();\n" +
            "        if (s2 !== peg$FAILED) {\n" +
            "          peg$savedPos = s0;\n" +
            "          s1 = peg$c19(s2);\n" +
            "          s0 = s1;\n" +
            "        } else {\n" +
            "          peg$currPos = s0;\n" +
            "          s0 = peg$FAILED;\n" +
            "        }\n" +
            "      } else {\n" +
            "        peg$currPos = s0;\n" +
            "        s0 = peg$FAILED;\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parsePhrase() {\n" +
            "      var s0, s1, s2, s3, s4, s5, s6;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      if (input.charCodeAt(peg$currPos) === 34) {\n" +
            "        s1 = peg$c20;\n" +
            "        peg$currPos++;\n" +
            "      } else {\n" +
            "        s1 = peg$FAILED;\n" +
            "        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n" +
            "      }\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        s2 = peg$parseToken();\n" +
            "        if (s2 !== peg$FAILED) {\n" +
            "          s3 = [];\n" +
            "          s4 = peg$currPos;\n" +
            "          s5 = peg$parse__();\n" +
            "          if (s5 !== peg$FAILED) {\n" +
            "            s6 = peg$parseToken();\n" +
            "            if (s6 !== peg$FAILED) {\n" +
            "              s5 = [s5, s6];\n" +
            "              s4 = s5;\n" +
            "            } else {\n" +
            "              peg$currPos = s4;\n" +
            "              s4 = peg$FAILED;\n" +
            "            }\n" +
            "          } else {\n" +
            "            peg$currPos = s4;\n" +
            "            s4 = peg$FAILED;\n" +
            "          }\n" +
            "          while (s4 !== peg$FAILED) {\n" +
            "            s3.push(s4);\n" +
            "            s4 = peg$currPos;\n" +
            "            s5 = peg$parse__();\n" +
            "            if (s5 !== peg$FAILED) {\n" +
            "              s6 = peg$parseToken();\n" +
            "              if (s6 !== peg$FAILED) {\n" +
            "                s5 = [s5, s6];\n" +
            "                s4 = s5;\n" +
            "              } else {\n" +
            "                peg$currPos = s4;\n" +
            "                s4 = peg$FAILED;\n" +
            "              }\n" +
            "            } else {\n" +
            "              peg$currPos = s4;\n" +
            "              s4 = peg$FAILED;\n" +
            "            }\n" +
            "          }\n" +
            "          if (s3 !== peg$FAILED) {\n" +
            "            if (input.charCodeAt(peg$currPos) === 34) {\n" +
            "              s4 = peg$c20;\n" +
            "              peg$currPos++;\n" +
            "            } else {\n" +
            "              s4 = peg$FAILED;\n" +
            "              if (peg$silentFails === 0) { peg$fail(peg$c21); }\n" +
            "            }\n" +
            "            if (s4 !== peg$FAILED) {\n" +
            "              peg$savedPos = s0;\n" +
            "              s1 = peg$c22(s2, s3);\n" +
            "              s0 = s1;\n" +
            "            } else {\n" +
            "              peg$currPos = s0;\n" +
            "              s0 = peg$FAILED;\n" +
            "            }\n" +
            "          } else {\n" +
            "            peg$currPos = s0;\n" +
            "            s0 = peg$FAILED;\n" +
            "          }\n" +
            "        } else {\n" +
            "          peg$currPos = s0;\n" +
            "          s0 = peg$FAILED;\n" +
            "        }\n" +
            "      } else {\n" +
            "        peg$currPos = s0;\n" +
            "        s0 = peg$FAILED;\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseTokenOrPhrase() {\n" +
            "      var s0;\n" +
            "\n" +
            "      s0 = peg$parseLinkTo();\n" +
            "      if (s0 === peg$FAILED) {\n" +
            "        s0 = peg$parseToken();\n" +
            "        if (s0 === peg$FAILED) {\n" +
            "          s0 = peg$parsePhrase();\n" +
            "        }\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseNotToken() {\n" +
            "      var s0, s1, s2, s3;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      if (input.substr(peg$currPos, 3) === peg$c6) {\n" +
            "        s1 = peg$c6;\n" +
            "        peg$currPos += 3;\n" +
            "      } else {\n" +
            "        s1 = peg$FAILED;\n" +
            "        if (peg$silentFails === 0) { peg$fail(peg$c7); }\n" +
            "      }\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        s2 = peg$parse_();\n" +
            "        if (s2 !== peg$FAILED) {\n" +
            "          s3 = peg$parseTokenOrPhrase();\n" +
            "          if (s3 !== peg$FAILED) {\n" +
            "            peg$savedPos = s0;\n" +
            "            s1 = peg$c23(s3);\n" +
            "            s0 = s1;\n" +
            "          } else {\n" +
            "            peg$currPos = s0;\n" +
            "            s0 = peg$FAILED;\n" +
            "          }\n" +
            "        } else {\n" +
            "          peg$currPos = s0;\n" +
            "          s0 = peg$FAILED;\n" +
            "        }\n" +
            "      } else {\n" +
            "        peg$currPos = s0;\n" +
            "        s0 = peg$FAILED;\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parsePrf() {\n" +
            "      var s0, s1, s2;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      if (input.charCodeAt(peg$currPos) === 35) {\n" +
            "        s1 = peg$c24;\n" +
            "        peg$currPos++;\n" +
            "      } else {\n" +
            "        s1 = peg$FAILED;\n" +
            "        if (peg$silentFails === 0) { peg$fail(peg$c25); }\n" +
            "      }\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        s2 = peg$parseNumber();\n" +
            "        if (s2 !== peg$FAILED) {\n" +
            "          peg$savedPos = s0;\n" +
            "          s1 = peg$c26(s2);\n" +
            "          s0 = s1;\n" +
            "        } else {\n" +
            "          peg$currPos = s0;\n" +
            "          s0 = peg$FAILED;\n" +
            "        }\n" +
            "      } else {\n" +
            "        peg$currPos = s0;\n" +
            "        s0 = peg$FAILED;\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseBooleanAnd() {\n" +
            "      var s0, s1, s2, s3, s4, s5;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      s1 = peg$parsePrimary();\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        s2 = peg$parse__();\n" +
            "        if (s2 !== peg$FAILED) {\n" +
            "          if (input.substr(peg$currPos, 3) === peg$c2) {\n" +
            "            s3 = peg$c2;\n" +
            "            peg$currPos += 3;\n" +
            "          } else {\n" +
            "            s3 = peg$FAILED;\n" +
            "            if (peg$silentFails === 0) { peg$fail(peg$c3); }\n" +
            "          }\n" +
            "          if (s3 !== peg$FAILED) {\n" +
            "            s4 = peg$parse__();\n" +
            "            if (s4 !== peg$FAILED) {\n" +
            "              s5 = peg$parseBooleanAnd();\n" +
            "              if (s5 !== peg$FAILED) {\n" +
            "                peg$savedPos = s0;\n" +
            "                s1 = peg$c27(s1, s5);\n" +
            "                s0 = s1;\n" +
            "              } else {\n" +
            "                peg$currPos = s0;\n" +
            "                s0 = peg$FAILED;\n" +
            "              }\n" +
            "            } else {\n" +
            "              peg$currPos = s0;\n" +
            "              s0 = peg$FAILED;\n" +
            "            }\n" +
            "          } else {\n" +
            "            peg$currPos = s0;\n" +
            "            s0 = peg$FAILED;\n" +
            "          }\n" +
            "        } else {\n" +
            "          peg$currPos = s0;\n" +
            "          s0 = peg$FAILED;\n" +
            "        }\n" +
            "      } else {\n" +
            "        peg$currPos = s0;\n" +
            "        s0 = peg$FAILED;\n" +
            "      }\n" +
            "      if (s0 === peg$FAILED) {\n" +
            "        s0 = peg$parsePrimary();\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parseBooleanOr() {\n" +
            "      var s0, s1, s2, s3, s4, s5;\n" +
            "\n" +
            "      s0 = peg$currPos;\n" +
            "      s1 = peg$parseBooleanAnd();\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        s2 = peg$parse__();\n" +
            "        if (s2 !== peg$FAILED) {\n" +
            "          s3 = peg$currPos;\n" +
            "          if (input.substr(peg$currPos, 2) === peg$c4) {\n" +
            "            s4 = peg$c4;\n" +
            "            peg$currPos += 2;\n" +
            "          } else {\n" +
            "            s4 = peg$FAILED;\n" +
            "            if (peg$silentFails === 0) { peg$fail(peg$c5); }\n" +
            "          }\n" +
            "          if (s4 !== peg$FAILED) {\n" +
            "            s5 = peg$parse__();\n" +
            "            if (s5 !== peg$FAILED) {\n" +
            "              s4 = [s4, s5];\n" +
            "              s3 = s4;\n" +
            "            } else {\n" +
            "              peg$currPos = s3;\n" +
            "              s3 = peg$FAILED;\n" +
            "            }\n" +
            "          } else {\n" +
            "            peg$currPos = s3;\n" +
            "            s3 = peg$FAILED;\n" +
            "          }\n" +
            "          if (s3 === peg$FAILED) {\n" +
            "            s3 = null;\n" +
            "          }\n" +
            "          if (s3 !== peg$FAILED) {\n" +
            "            s4 = peg$parseBooleanOr();\n" +
            "            if (s4 !== peg$FAILED) {\n" +
            "              peg$savedPos = s0;\n" +
            "              s1 = peg$c28(s1, s4);\n" +
            "              s0 = s1;\n" +
            "            } else {\n" +
            "              peg$currPos = s0;\n" +
            "              s0 = peg$FAILED;\n" +
            "            }\n" +
            "          } else {\n" +
            "            peg$currPos = s0;\n" +
            "            s0 = peg$FAILED;\n" +
            "          }\n" +
            "        } else {\n" +
            "          peg$currPos = s0;\n" +
            "          s0 = peg$FAILED;\n" +
            "        }\n" +
            "      } else {\n" +
            "        peg$currPos = s0;\n" +
            "        s0 = peg$FAILED;\n" +
            "      }\n" +
            "      if (s0 === peg$FAILED) {\n" +
            "        s0 = peg$parseBooleanAnd();\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parsePrimary() {\n" +
            "      var s0, s1, s2, s3, s4, s5;\n" +
            "\n" +
            "      s0 = peg$parseTokenOrPhrase();\n" +
            "      if (s0 === peg$FAILED) {\n" +
            "        s0 = peg$currPos;\n" +
            "        if (input.charCodeAt(peg$currPos) === 40) {\n" +
            "          s1 = peg$c29;\n" +
            "          peg$currPos++;\n" +
            "        } else {\n" +
            "          s1 = peg$FAILED;\n" +
            "          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n" +
            "        }\n" +
            "        if (s1 !== peg$FAILED) {\n" +
            "          s2 = peg$parse_();\n" +
            "          if (s2 !== peg$FAILED) {\n" +
            "            s3 = peg$parseBooleanOr();\n" +
            "            if (s3 !== peg$FAILED) {\n" +
            "              s4 = peg$parse_();\n" +
            "              if (s4 !== peg$FAILED) {\n" +
            "                if (input.charCodeAt(peg$currPos) === 41) {\n" +
            "                  s5 = peg$c31;\n" +
            "                  peg$currPos++;\n" +
            "                } else {\n" +
            "                  s5 = peg$FAILED;\n" +
            "                  if (peg$silentFails === 0) { peg$fail(peg$c32); }\n" +
            "                }\n" +
            "                if (s5 !== peg$FAILED) {\n" +
            "                  peg$savedPos = s0;\n" +
            "                  s1 = peg$c33(s3);\n" +
            "                  s0 = s1;\n" +
            "                } else {\n" +
            "                  peg$currPos = s0;\n" +
            "                  s0 = peg$FAILED;\n" +
            "                }\n" +
            "              } else {\n" +
            "                peg$currPos = s0;\n" +
            "                s0 = peg$FAILED;\n" +
            "              }\n" +
            "            } else {\n" +
            "              peg$currPos = s0;\n" +
            "              s0 = peg$FAILED;\n" +
            "            }\n" +
            "          } else {\n" +
            "            peg$currPos = s0;\n" +
            "            s0 = peg$FAILED;\n" +
            "          }\n" +
            "        } else {\n" +
            "          peg$currPos = s0;\n" +
            "          s0 = peg$FAILED;\n" +
            "        }\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parse_() {\n" +
            "      var s0, s1;\n" +
            "\n" +
            "      peg$silentFails++;\n" +
            "      s0 = [];\n" +
            "      if (peg$c35.test(input.charAt(peg$currPos))) {\n" +
            "        s1 = input.charAt(peg$currPos);\n" +
            "        peg$currPos++;\n" +
            "      } else {\n" +
            "        s1 = peg$FAILED;\n" +
            "        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n" +
            "      }\n" +
            "      while (s1 !== peg$FAILED) {\n" +
            "        s0.push(s1);\n" +
            "        if (peg$c35.test(input.charAt(peg$currPos))) {\n" +
            "          s1 = input.charAt(peg$currPos);\n" +
            "          peg$currPos++;\n" +
            "        } else {\n" +
            "          s1 = peg$FAILED;\n" +
            "          if (peg$silentFails === 0) { peg$fail(peg$c36); }\n" +
            "        }\n" +
            "      }\n" +
            "      peg$silentFails--;\n" +
            "      if (s0 === peg$FAILED) {\n" +
            "        s1 = peg$FAILED;\n" +
            "        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "    function peg$parse__() {\n" +
            "      var s0, s1;\n" +
            "\n" +
            "      peg$silentFails++;\n" +
            "      s0 = [];\n" +
            "      if (peg$c35.test(input.charAt(peg$currPos))) {\n" +
            "        s1 = input.charAt(peg$currPos);\n" +
            "        peg$currPos++;\n" +
            "      } else {\n" +
            "        s1 = peg$FAILED;\n" +
            "        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n" +
            "      }\n" +
            "      if (s1 !== peg$FAILED) {\n" +
            "        while (s1 !== peg$FAILED) {\n" +
            "          s0.push(s1);\n" +
            "          if (peg$c35.test(input.charAt(peg$currPos))) {\n" +
            "            s1 = input.charAt(peg$currPos);\n" +
            "            peg$currPos++;\n" +
            "          } else {\n" +
            "            s1 = peg$FAILED;\n" +
            "            if (peg$silentFails === 0) { peg$fail(peg$c36); }\n" +
            "          }\n" +
            "        }\n" +
            "      } else {\n" +
            "        s0 = peg$FAILED;\n" +
            "      }\n" +
            "      peg$silentFails--;\n" +
            "      if (s0 === peg$FAILED) {\n" +
            "        s1 = peg$FAILED;\n" +
            "        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n" +
            "      }\n" +
            "\n" +
            "      return s0;\n" +
            "    }\n" +
            "\n" +
            "     function flatten(node) {\n" +
            "        if (node.type == 'and' || node.type == 'or') {\n" +
            "        var values = [];\n" +
            "          node.values.forEach(function (value) {\n" +
            "            if (value.type == node.type) {\n" +
            "              values.push.apply(values, value.values);\n" +
            "            } else {\n" +
            "              values.push(value);\n" +
            "            }\n" +
            "          });\n" +
            "          node.values = values;\n" +
            "          return node;\n" +
            "        } else {\n" +
            "          return node;\n" +
            "        }\n" +
            "    } \n" +
            "\n" +
            "    peg$result = peg$startRuleFunction();\n" +
            "\n" +
            "    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n" +
            "      return peg$result;\n" +
            "    } else {\n" +
            "      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n" +
            "        peg$fail({ type: \"end\", description: \"end of input\" });\n" +
            "      }\n" +
            "\n" +
            "      throw peg$buildException(\n" +
            "        null,\n" +
            "        peg$maxFailExpected,\n" +
            "        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n" +
            "        peg$maxFailPos < input.length\n" +
            "          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n" +
            "          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n" +
            "      );\n" +
            "    }\n" +
            "  }\n" +
            "\n" +
            "  return {\n" +
            "    SyntaxError: peg$SyntaxError,\n" +
            "    parse:       peg$parse\n" +
            "  };\n" +
            "})();\n\n\nfunction parse(str) { return module.parse(str); }" +
            "";

    private QueryParserJS() {}

    static ScriptEngine engine;

    static {
        engine = new ScriptEngineManager().getEngineByName("nashorn");
        try {
            engine.eval(jsCode);
        } catch (ScriptException e) {
            e.printStackTrace();
        }
    }

    public static ScriptObjectMirror parse(String query) {
        try {
            Invocable invocable = (Invocable) engine;
            return (ScriptObjectMirror) invocable.invokeFunction("parse", query);
        } catch (ScriptException | NoSuchMethodException e) {
            e.printStackTrace();
            return null;
        }
    }
}
